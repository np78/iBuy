/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * deleteItemsFrame.java
 *
 * Created on Apr 25, 2012, 10:10:18 AM
 */
package ibuyswing;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.LinkedList;
import java.util.StringTokenizer;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JLabel;
import javax.swing.JTextField;

import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.session.WebAuthSession;

/**
 *
 * @author Luke
 */
public class deleteItemsFrame extends javax.swing.JFrame {

    private DropboxAPI<WebAuthSession> mDBApi;
	private LinkedList<JCheckBox> checkboxes = new LinkedList<JCheckBox>();
	private String user, filename;
	
    /** Creates new form deleteItemsFrame */
    public deleteItemsFrame(String user, String filename, DropboxAPI<WebAuthSession> mDBApi) {
        
                super("iBuy - Remove Items");
		this.user = user;
		this.filename = filename;
		this.mDBApi = mDBApi;
                
        initComponents();
        getDeleteList();
        setVisible(true);
    }
    public void getDeleteList(){
        
                StringTokenizer st = new StringTokenizer(Global.getFile(mDBApi, "/" + user + "/" + Global.toFileName(filename) + ".txt"));
		checkboxes.clear();
		while(st.hasMoreTokens())
		{
			String name = st.nextToken();
			st.nextToken();
			st.nextToken();
			st.nextToken();
			st.nextToken();
			JCheckBox check = new JCheckBox();
			check.setName(name);
			checkboxes.add(check);
		}
		deleteList.setLayout(new GridLayout(checkboxes.size() + 2, 2));
		deleteList.add(new JLabel("Select to Remove"));
		deleteList.add(new JLabel("Item Name"));
		for(int i = 0; i < checkboxes.size(); i++)
		{
			deleteList.add(checkboxes.get(i));
			deleteList.add(new JTextField(checkboxes.get(i).getName()));
		}
                deleteList.doLayout(); 
                deleteList.setVisible(true);
}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteListPanel = new javax.swing.JPanel();
        deleteListScrollPane = new javax.swing.JScrollPane();
        deleteList = new javax.swing.JPanel();
        deleteListLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(51, 51, 51));

        deleteListPanel.setBackground(new java.awt.Color(51, 51, 51));
        deleteListPanel.setName("deleteListPanel"); // NOI18N

        deleteListScrollPane.setName("deleteListScrollPane"); // NOI18N

        deleteList.setName("deleteList"); // NOI18N

        javax.swing.GroupLayout deleteListLayout = new javax.swing.GroupLayout(deleteList);
        deleteList.setLayout(deleteListLayout);
        deleteListLayout.setHorizontalGroup(
            deleteListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );
        deleteListLayout.setVerticalGroup(
            deleteListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );

        deleteListScrollPane.setViewportView(deleteList);

        deleteListLabel.setBackground(new java.awt.Color(255, 255, 255));
        deleteListLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        deleteListLabel.setForeground(new java.awt.Color(255, 102, 0));
        deleteListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteListLabel.setText("Delete Items");
        deleteListLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteListLabel.setName("deleteListLabel"); // NOI18N

        updateButton.setBackground(new java.awt.Color(102, 102, 102));
        updateButton.setFont(new java.awt.Font("Tahoma 18 18 18 18", 1, 18));
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.setActionCommand("cancelAccountButton");
        updateButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), null));
        updateButton.setName("updateButton"); // NOI18N
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(102, 102, 102));
        cancelButton.setFont(new java.awt.Font("Tahoma 18 18 18 18", 1, 18));
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.setActionCommand("cancelAccountButton");
        cancelButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), null));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteListPanelLayout = new javax.swing.GroupLayout(deleteListPanel);
        deleteListPanel.setLayout(deleteListPanelLayout);
        deleteListPanelLayout.setHorizontalGroup(
            deleteListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deleteListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(deleteListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteListPanelLayout.createSequentialGroup()
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        deleteListPanelLayout.setVerticalGroup(
            deleteListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(deleteListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-357)/2, (screenSize.height-338)/2, 357, 338);
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if(evt.getSource() == updateButton)
  		{
			StringTokenizer list = new StringTokenizer(Global.getFile(mDBApi, "/" + user + "/" + Global.toFileName(filename) + ".txt"));
			String newList = "";
			for(int i = 0; i < checkboxes.size(); i++)
			{
				String name = list.nextToken();
				String category = list.nextToken();
				String store = list.nextToken();
				String importance = list.nextToken();
				String isChecked = list.nextToken();
				if(!checkboxes.get(i).isSelected())
				{
					newList += name + "\t" + category + "\t" + store + "\t" + importance + "\t" + isChecked + "\n";
				}
			}
			Global.putFileOverwrite(mDBApi, "/" + user + "/" + Global.toFileName(filename) + ".txt", newList);
			
			//Update list date
			StringTokenizer st = new StringTokenizer(Global.getFile(mDBApi, "/" + user + "/lists.txt"));
			String newList2 = "";
			while(st.hasMoreTokens())
			{
				String token = st.nextToken();
				String token2 = st.nextToken();
				String token3 = st.nextToken();
				if(token.equals(Global.toFileName(filename)))
				{
					Date d = new Date(System.currentTimeMillis());
					newList2 += token + "\t" + token2 + "\t" + Global.toFileName(d.toString())  + "\n";
				}
				else
					newList2 += token + "\t" + token2 + "\t" + token3 + "\n";
			}
			Global.putFileOverwrite(mDBApi, "/" + user + "/lists.txt", newList2);
			
			itemListView ilv = new itemListView(user, filename, mDBApi);
                        ilv.getItemList();
                        setVisible(false);
                        dispose();
  		}
	
    }//GEN-LAST:event_updateButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if(evt.getSource() == cancelButton)
  		{
			new itemListView(user, filename, mDBApi);
  			setVisible(false);
  			dispose();
  		}
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel deleteList;
    private javax.swing.JLabel deleteListLabel;
    private javax.swing.JPanel deleteListPanel;
    private javax.swing.JScrollPane deleteListScrollPane;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
