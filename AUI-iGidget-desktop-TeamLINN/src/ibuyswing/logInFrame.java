/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * logInFrame.java
 *
 * Created on Apr 14, 2012, 4:41:05 PM
 */
package ibuyswing;

import java.awt.Container;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.net.URL;
import java.util.Scanner;
import java.util.StringTokenizer;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import org.jdesktop.application.Action;

import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.DropboxAPI.DropboxFileInfo;
import com.dropbox.client2.DropboxAPI.Entry;
import com.dropbox.client2.exception.DropboxException;
import com.dropbox.client2.session.*;
import com.dropbox.client2.session.Session.AccessType;
import com.dropbox.client2.session.WebAuthSession.WebAuthInfo;
/**
 *
 * @author Luke Tytor
 * @author Nicholas
 */
public class logInFrame extends javax.swing.JFrame {

    private DropboxAPI<WebAuthSession> mDBApi;
    
    /** Creates new form logInFrame */
    public logInFrame() {
        super("iBuy-Login");
        initComponents();
        mDBApi = Global.createSession();
        setVisible(true);
        
    }

    public static void main(String[] args) {
		new logInFrame();
	}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        signInPanel = new javax.swing.JPanel();
        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        signInButton = new javax.swing.JButton();
        userNameField = new javax.swing.JTextField();
        signInLabel = new javax.swing.JLabel();
        newAccountButton = new javax.swing.JButton();
        signInLabel1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(logInFrame.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setForeground(resourceMap.getColor("Form.foreground")); // NOI18N
        setName("Form"); // NOI18N

        signInPanel.setBackground(resourceMap.getColor("signInPanel.background")); // NOI18N
        signInPanel.setForeground(resourceMap.getColor("signInPanel.foreground")); // NOI18N
        signInPanel.setName("signInPanel"); // NOI18N

        userNameLabel.setBackground(resourceMap.getColor("userNameLabel.background")); // NOI18N
        userNameLabel.setFont(resourceMap.getFont("userNameLabel.font")); // NOI18N
        userNameLabel.setForeground(resourceMap.getColor("userNameLabel.foreground")); // NOI18N
        userNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        userNameLabel.setText(resourceMap.getString("userNameLabel.text")); // NOI18N
        userNameLabel.setName("userNameLabel"); // NOI18N

        passwordLabel.setBackground(resourceMap.getColor("passwordLabel.background")); // NOI18N
        passwordLabel.setFont(resourceMap.getFont("passwordLabel.font")); // NOI18N
        passwordLabel.setForeground(resourceMap.getColor("passwordLabel.foreground")); // NOI18N
        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        signInButton.setBackground(resourceMap.getColor("signInButton.background")); // NOI18N
        signInButton.setFont(resourceMap.getFont("signInButton.font")); // NOI18N
        signInButton.setForeground(resourceMap.getColor("signInButton.foreground")); // NOI18N
        signInButton.setText(resourceMap.getString("signInButton.text")); // NOI18N
        signInButton.setToolTipText(resourceMap.getString("signInButton.toolTipText")); // NOI18N
        signInButton.setActionCommand(resourceMap.getString("signInButton.actionCommand")); // NOI18N
        signInButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), null));
        signInButton.setMaximumSize(new java.awt.Dimension(91, 33));
        signInButton.setMinimumSize(new java.awt.Dimension(91, 33));
        signInButton.setName("signInButton"); // NOI18N
        signInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInButtonActionPerformed(evt);
            }
        });
        signInButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                signInButtonKeyPressed(evt);
            }
        });

        userNameField.setText(resourceMap.getString("userNameField.text")); // NOI18N
        userNameField.setToolTipText(resourceMap.getString("userNameField.toolTipText")); // NOI18N
        userNameField.setName("userNameField"); // NOI18N

        signInLabel.setFont(resourceMap.getFont("signInLabel.font")); // NOI18N
        signInLabel.setForeground(resourceMap.getColor("signInLabel.foreground")); // NOI18N
        signInLabel.setText(resourceMap.getString("signInLabel.text")); // NOI18N
        signInLabel.setName("signInLabel"); // NOI18N

        newAccountButton.setBackground(resourceMap.getColor("signUpButton.background")); // NOI18N
        newAccountButton.setFont(resourceMap.getFont("signUpButton.font")); // NOI18N
        newAccountButton.setForeground(resourceMap.getColor("signUpButton.foreground")); // NOI18N
        newAccountButton.setText(resourceMap.getString("signUpButton.text")); // NOI18N
        newAccountButton.setToolTipText(resourceMap.getString("signUpButton.toolTipText")); // NOI18N
        newAccountButton.setActionCommand(resourceMap.getString("signUpButton.actionCommand")); // NOI18N
        newAccountButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), null));
        newAccountButton.setName("signUpButton"); // NOI18N
        newAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAccountButtonActionPerformed(evt);
            }
        });

        signInLabel1.setFont(resourceMap.getFont("signInLabel1.font")); // NOI18N
        signInLabel1.setForeground(resourceMap.getColor("signInLabel1.foreground")); // NOI18N
        signInLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signInLabel1.setText(resourceMap.getString("signInLabel1.text")); // NOI18N
        signInLabel1.setName("signInLabel1"); // NOI18N

        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setName("passwordField"); // NOI18N
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout signInPanelLayout = new javax.swing.GroupLayout(signInPanel);
        signInPanel.setLayout(signInPanelLayout);
        signInPanelLayout.setHorizontalGroup(
            signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signInPanelLayout.createSequentialGroup()
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(signInPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(signInLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, signInPanelLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(signInLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, signInPanelLayout.createSequentialGroup()
                                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userNameLabel)
                                    .addComponent(passwordLabel))
                                .addGap(18, 18, 18)
                                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userNameField)
                                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)))))
                .addGap(163, 163, 163))
            .addGroup(signInPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(newAccountButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(signInButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        signInPanelLayout.setVerticalGroup(
            signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signInPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signInPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signInPanelLayout.createSequentialGroup()
                        .addComponent(signInLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)))
                .addComponent(signInLabel)
                .addGap(11, 11, 11)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(signInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        newAccountButton.getAccessibleContext().setAccessibleName(resourceMap.getString("cancelButton1.AccessibleContext.accessibleName")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(signInPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(signInPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-346)/2, (screenSize.height-393)/2, 346, 393);
    }// </editor-fold>//GEN-END:initComponents

    private void signInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInButtonActionPerformed
        if(evt.getSource() == signInButton){
  			logIn();
  		}
    }//GEN-LAST:event_signInButtonActionPerformed

    private void newAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAccountButtonActionPerformed
       if(evt.getSource() == newAccountButton){
  		new createAccountFrame(mDBApi).setVisible(true);
  		dispose();
  	}
    }//GEN-LAST:event_newAccountButtonActionPerformed

    private void signInButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_signInButtonKeyPressed
        if((passwordField.isCursorSet() || userNameField.isCursorSet()) && evt.getKeyCode() == KeyEvent.VK_ENTER)
			logIn();
    }//GEN-LAST:event_signInButtonKeyPressed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    public void getReports(String user)
    {
        StringTokenizer st = new StringTokenizer(Global.getFile(mDBApi, "/"+user+"/report.txt"));
        boolean[] bool = new boolean[4];
        int i = 0;
        while(st.hasMoreTokens())
        {
            String token = st.nextToken();
            if(token.equals("false"))
            bool[i] = false;
            else
            bool[i] = true;
            i++;
        }
        if(bool[0])
        {
            new ItemStatistics(user, mDBApi);
        }
        if(bool[1])
        {
            new ExpenseTracker(user, mDBApi, bool[2], bool[3]);
        }
    }
    
    @Action
    public void logIn() {
        
                String user = userNameField.getText();
		String pass = passwordField.getText();
		if(user.equals("") || pass.equals("")){
			JOptionPane.showMessageDialog(this, "Please complete all fields.");               
                }
                 else
		{
			//Reads users.txt to String to StringTokenizer
  			StringTokenizer scanner = new StringTokenizer(Global.getFile(mDBApi, "/users.txt"));
  			//Checks if "user" is in list and if password matches
                        boolean success = false;
  			while(scanner.hasMoreTokens())
  			{
  				String username = scanner.nextToken();
  				String password = scanner.nextToken();
  				if(username.equals(user) && password.equals(pass))
  				{
                                    success = true;
                                    getReports(user);
                                    new mainMenuFrame(user, mDBApi);
                                    setVisible(false);
                                    dispose();
  				}
  			}
                        if(!success)
                            JOptionPane.showMessageDialog(this, "Login Failed.");   
		}     
    }
    public void logout(){
    
        System.exit(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton newAccountButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton signInButton;
    private javax.swing.JLabel signInLabel;
    private javax.swing.JLabel signInLabel1;
    private javax.swing.JPanel signInPanel;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
